apiVersion: v1
kind: ServiceAccount
metadata:
  name: wait-for-nginx
  namespace: argocd
  annotations:
    argocd.argoproj.io/sync-wave: "10"
    argocd.argoproj.io/hook: PostSync
    argocd.argoproj.io/hook-delete-policy: HookSucceeded
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: wait-for-nginx
  annotations:
    argocd.argoproj.io/sync-wave: "10"
    argocd.argoproj.io/hook: PostSync
    argocd.argoproj.io/hook-delete-policy: HookSucceeded
rules:
- apiGroups: ["networking.k8s.io"]
  resources: ["ingressclasses"]
  verbs: ["get", "list"]
- apiGroups: [""]
  resources: ["services", "endpoints"]
  verbs: ["get", "list"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: wait-for-nginx
  annotations:
    argocd.argoproj.io/sync-wave: "10"
    argocd.argoproj.io/hook: PostSync
    argocd.argoproj.io/hook-delete-policy: HookSucceeded
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: wait-for-nginx
subjects:
- kind: ServiceAccount
  name: wait-for-nginx
  namespace: argocd
---
apiVersion: batch/v1
kind: Job
metadata:
  name: wait-for-nginx
  namespace: argocd
  annotations:
    argocd.argoproj.io/sync-wave: "10"
    argocd.argoproj.io/hook: PostSync
    argocd.argoproj.io/hook-delete-policy: HookSucceeded
spec:
  template:
    metadata:
      name: wait-for-nginx
    spec:
      serviceAccountName: wait-for-nginx
      restartPolicy: OnFailure
      containers:
      - name: wait-for-nginx
        # renovate: datasource=docker depName=alpine/k8s
        image: alpine/k8s:1.34.1
        command:
        - sh
        - -c
        - |
          set -e
          
          echo "=========================================="
          echo "Waiting for NGINX IngressClass and Admission Webhook"
          echo "=========================================="
          echo ""
          
          # Step 1: Wait for nginx IngressClass to be created
          echo "Step 1: Waiting for nginx IngressClass..."
          until kubectl get ingressclass nginx 2>/dev/null; do
            echo "nginx IngressClass not found, waiting..."
            sleep 5
          done
          echo "✅ nginx IngressClass found!"
          echo ""
          
          # Step 2: Wait for NGINX admission webhook service
          echo "Step 2: Waiting for NGINX admission webhook service..."
          until kubectl get service ingress-nginx-controller-admission -n ingress-nginx 2>/dev/null; do
            echo "ingress-nginx-controller-admission service not found, waiting..."
            sleep 5
          done
          echo "✅ NGINX admission webhook service found!"
          echo ""
          
          # Step 3: Wait for admission webhook endpoints to be ready
          echo "Step 3: Waiting for admission webhook endpoints..."
          until kubectl get endpoints ingress-nginx-controller-admission -n ingress-nginx -o jsonpath='{.subsets[0].addresses[0].ip}' 2>/dev/null | grep -q .; do
            echo "admission webhook endpoints not ready, waiting..."
            sleep 5
          done
          echo "✅ NGINX admission webhook endpoints ready!"
          echo ""
          
          echo "✅ NGINX Ingress Controller is fully ready!"
          echo "✅ Safe to create Ingress resources - both IngressClass and admission webhook available"
      # Run on system nodes with critical addons
      nodeSelector:
        node-type: system
      tolerations:
      - key: CriticalAddonsOnly
        operator: Exists