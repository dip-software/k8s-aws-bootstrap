apiVersion: v1
kind: ServiceAccount
metadata:
  name: cluster-cleanup
  namespace: argocd
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: cluster-cleanup
rules:
# ArgoCD Application management
- apiGroups: ["argoproj.io"]
  resources: ["applications"]
  verbs: ["get", "list", "patch", "update"]
# Karpenter NodeClaim management (no longer need nodepool patch)
- apiGroups: ["karpenter.sh"]
  resources: ["nodeclaims"]
  verbs: ["get", "list", "delete", "watch"]
# Node listing for verification
- apiGroups: [""]
  resources: ["nodes"]
  verbs: ["get", "list"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: cluster-cleanup
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cluster-cleanup
subjects:
- kind: ServiceAccount
  name: cluster-cleanup
  namespace: argocd
---
apiVersion: batch/v1
kind: Job
metadata:
  name: cluster-cleanup
  namespace: argocd
spec:
  ttlSecondsAfterFinished: 3600  # Keep job for 1 hour after completion
  backoffLimit: 3
  template:
    metadata:
      name: cluster-cleanup
    spec:
      serviceAccountName: cluster-cleanup
      restartPolicy: OnFailure
      containers:
      - name: cleanup
        # renovate: datasource=docker depName=alpine/k8s
        image: alpine/k8s:1.32.0
        command:
        - sh
        - -c
        - |
          set -e
          
          echo "=========================================="
          echo "Starting Cluster Cleanup Process"
          echo "=========================================="
          echo ""
          
          # Step 1: Stop Bootstrap ArgoCD App Auto-Sync
          echo "Step 1: Disabling auto-sync for bootstrap application..."
          if kubectl get application bootstrap -n argocd >/dev/null 2>&1; then
            kubectl patch application bootstrap -n argocd --type merge -p '{"spec":{"syncPolicy":{"automated":null}}}'
            echo "✅ Auto-sync disabled for bootstrap application"
          else
            echo "⚠️  Bootstrap application not found, skipping..."
          fi
          echo ""
          
          # Step 2: Switch Bootstrap App to Shutdown Overlay
          echo "Step 2: Switching bootstrap app to shutdown overlay..."
          if kubectl get application bootstrap -n argocd >/dev/null 2>&1; then
            # Get current source path
            CURRENT_PATH=$(kubectl get application bootstrap -n argocd -o jsonpath='{.spec.source.path}')
            echo "Current path: ${CURRENT_PATH}"
            
            # Switch to shutdown overlay
            if [ "${CURRENT_PATH}" != "overlays/shutdown" ]; then
              kubectl patch application bootstrap -n argocd --type merge -p '{"spec":{"source":{"path":"overlays/shutdown"}}}'
              echo "✅ Bootstrap app source path changed to 'overlays/shutdown'"
              
              # Trigger manual sync to apply shutdown overlay
              echo "Triggering manual sync to apply shutdown overlay..."
              kubectl patch application bootstrap -n argocd --type merge -p '{"operation":{"initiatedBy":{"username":"cluster-cleanup-job"},"sync":{"revision":"HEAD","prune":false}}}'
              
              # Wait for sync to complete
              echo "Waiting for sync to complete..."
              for i in $(seq 1 60); do
                SYNC_STATUS=$(kubectl get application bootstrap -n argocd -o jsonpath='{.status.sync.status}')
                HEALTH_STATUS=$(kubectl get application bootstrap -n argocd -o jsonpath='{.status.health.status}')
                echo "Sync: ${SYNC_STATUS}, Health: ${HEALTH_STATUS}"
                
                if [ "${SYNC_STATUS}" = "Synced" ]; then
                  echo "✅ Bootstrap app synced successfully with shutdown overlay"
                  break
                fi
                
                if [ $i -eq 60 ]; then
                  echo "⚠️  Sync did not complete within timeout, continuing..."
                fi
                
                sleep 5
              done
              
              # Verify NodePool CPU is now 0
              echo "Verifying NodePool CPU limit after overlay application..."
              if kubectl get nodepool default -n karpenter >/dev/null 2>&1; then
                CPU_LIMIT=$(kubectl get nodepool default -n karpenter -o jsonpath='{.spec.limits.cpu}')
                echo "✅ NodePool CPU limit is now: ${CPU_LIMIT}"
                
                if [ "${CPU_LIMIT}" != "0" ]; then
                  echo "❌ Expected CPU limit to be 0, but got: ${CPU_LIMIT}"
                  echo "This may indicate the shutdown overlay didn't apply correctly"
                fi
              fi
            else
              echo "✅ Bootstrap app already using shutdown overlay"
            fi
          else
            echo "⚠️  Bootstrap application not found, skipping..."
          fi
          echo ""
          
          # Step 3: Remove All NodeClaims
          echo "Step 3: Removing all NodeClaims..."
          
          # Check if any nodeclaims exist
          NODECLAIM_COUNT=$(kubectl get nodeclaims -n karpenter --no-headers 2>/dev/null | wc -l | tr -d ' ')
          
          if [ "${NODECLAIM_COUNT}" -gt 0 ]; then
            echo "Found ${NODECLAIM_COUNT} nodeclaim(s) to delete:"
            kubectl get nodeclaims -n karpenter -o custom-columns=NAME:.metadata.name,NODE:.status.nodeName,AGE:.metadata.creationTimestamp
            echo ""
            
            echo "Deleting all nodeclaims..."
            kubectl delete nodeclaims --all -n karpenter
            
            echo "Waiting for nodeclaims to be fully removed (timeout: 10 minutes)..."
            kubectl wait --for=delete nodeclaims --all -n karpenter --timeout=10m || true
            
            # Verify deletion
            REMAINING=$(kubectl get nodeclaims -n karpenter --no-headers 2>/dev/null | wc -l | tr -d ' ')
            if [ "${REMAINING}" -eq 0 ]; then
              echo "✅ All nodeclaims removed successfully"
            else
              echo "⚠️  ${REMAINING} nodeclaim(s) still remaining"
              kubectl get nodeclaims -n karpenter
            fi
          else
            echo "✅ No nodeclaims found, nothing to delete"
          fi
          echo ""
          
          # Step 4: Verify Cleanup
          echo "=========================================="
          echo "Step 4: Verification"
          echo "=========================================="
          echo ""
          
          echo "Checking for remaining nodeclaims..."
          NODECLAIM_COUNT=$(kubectl get nodeclaims -n karpenter --no-headers 2>/dev/null | wc -l | tr -d ' ')
          if [ "${NODECLAIM_COUNT}" -eq 0 ]; then
            echo "✅ No nodeclaims remaining"
          else
            echo "⚠️  ${NODECLAIM_COUNT} nodeclaim(s) still present:"
            kubectl get nodeclaims -n karpenter
          fi
          echo ""
          
          echo "Checking for Karpenter-managed nodes..."
          KARPENTER_NODES=$(kubectl get nodes -l node-type=karpenter-managed --no-headers 2>/dev/null | wc -l | tr -d ' ')
          if [ "${KARPENTER_NODES}" -eq 0 ]; then
            echo "✅ No Karpenter-managed nodes remaining"
          else
            echo "⚠️  ${KARPENTER_NODES} Karpenter-managed node(s) still present:"
            kubectl get nodes -l node-type=karpenter-managed
          fi
          echo ""
          
          echo "Checking NodePool CPU limit..."
          if kubectl get nodepool default -n karpenter >/dev/null 2>&1; then
            CPU_LIMIT=$(kubectl get nodepool default -n karpenter -o jsonpath='{.spec.limits.cpu}')
            if [ "${CPU_LIMIT}" = "0" ]; then
              echo "✅ NodePool CPU limit is 0"
            else
              echo "⚠️  NodePool CPU limit is ${CPU_LIMIT} (expected: 0)"
            fi
          fi
          echo ""
          
          echo "Checking bootstrap app configuration..."
          if kubectl get application bootstrap -n argocd >/dev/null 2>&1; then
            CURRENT_PATH=$(kubectl get application bootstrap -n argocd -o jsonpath='{.spec.source.path}')
            AUTO_SYNC=$(kubectl get application bootstrap -n argocd -o jsonpath='{.spec.syncPolicy.automated}')
            
            if [ "${CURRENT_PATH}" = "overlays/shutdown" ]; then
              echo "✅ Bootstrap app is using shutdown overlay"
            else
              echo "⚠️  Bootstrap app path is '${CURRENT_PATH}' (expected: 'overlays/shutdown')"
            fi
            
            if [ -z "${AUTO_SYNC}" ] || [ "${AUTO_SYNC}" = "null" ]; then
              echo "✅ Bootstrap app auto-sync is disabled"
            else
              echo "⚠️  Bootstrap app auto-sync is still enabled"
            fi
          fi
          echo ""
          
          # Final Summary
          echo "=========================================="
          echo "Cleanup Process Complete"
          echo "=========================================="
          echo ""
          echo "Summary:"
          echo "  - Auto-sync: Disabled"
          echo "  - Bootstrap path: Switched to shutdown overlay"
          echo "  - NodePool CPU limit: 0 (via shutdown overlay)"
          echo "  - NodeClaims: ${NODECLAIM_COUNT} remaining"
          echo "  - Karpenter nodes: ${KARPENTER_NODES} remaining"
          echo ""
          
          if [ "${NODECLAIM_COUNT}" -eq 0 ] && [ "${KARPENTER_NODES}" -eq 0 ]; then
            echo "✅ Cluster is ready for infrastructure destruction"
            exit 0
          else
            echo "⚠️  Some resources still remain. Review the output above."
            exit 1
          fi
      # Run on system nodes with critical addons
      nodeSelector:
        node-type: system
      tolerations:
      - key: CriticalAddonsOnly
        operator: Exists
