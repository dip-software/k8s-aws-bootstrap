apiVersion: batch/v1
kind: Job
metadata:
  name: webhook-cabundle-patcher
  namespace: kube-system
  annotations:
    argocd.argoproj.io/sync-wave: "3"
    argocd.argoproj.io/hook: PostSync
    argocd.argoproj.io/hook-delete-policy: BeforeHookCreation
spec:
  ttlSecondsAfterFinished: 300
  template:
    metadata:
      name: webhook-cabundle-patcher
    spec:
      serviceAccountName: webhook-cert-generator
      restartPolicy: OnFailure
      containers:
      - name: cabundle-patcher
        image: alpine/openssl:latest
        command:
        - /bin/sh
        - -c
        - |
          set -e
          
          # Wait for secret to exist
          until kubectl get secret amazon-eks-pod-identity-webhook-cert -n kube-system 2>/dev/null; do
            echo "Waiting for certificate secret..."
            sleep 2
          done
          
          # Get CA bundle from secret annotation or generate from cert
          CA_BUNDLE=$(kubectl get secret amazon-eks-pod-identity-webhook-cert -n kube-system -o jsonpath='{.metadata.annotations.ca-bundle}')
          
          if [ -z "$CA_BUNDLE" ]; then
            # Extract from certificate if annotation doesn't exist
            CA_BUNDLE=$(kubectl get secret amazon-eks-pod-identity-webhook-cert -n kube-system -o jsonpath='{.data.tls\.crt}')
          fi
          
          # Patch the MutatingWebhookConfiguration with the CA bundle
          kubectl patch mutatingwebhookconfiguration amazon-eks-pod-identity-webhook \
            --type='json' \
            -p="[{'op': 'replace', 'path': '/webhooks/0/clientConfig/caBundle', 'value': '${CA_BUNDLE}'}]"
          
          echo "CA bundle patched successfully"
        volumeMounts:
        - name: kubectl
          mountPath: /usr/local/bin/kubectl
          subPath: kubectl
      initContainers:
      - name: install-kubectl
        image: alpine:latest
        command:
        - /bin/sh
        - -c
        - |
          apk add --no-cache curl
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          mv kubectl /kubectl-bin/kubectl
        volumeMounts:
        - name: kubectl
          mountPath: /kubectl-bin
      volumes:
      - name: kubectl
        emptyDir: {}
      # Run on system nodes with critical addons
      nodeSelector:
        node-type: system
      tolerations:
      - key: CriticalAddonsOnly
        operator: Exists
