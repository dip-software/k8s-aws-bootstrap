apiVersion: karpenter.sh/v1
kind: NodePool
metadata:
  name: default
  namespace: karpenter
  annotations:
    argocd.argoproj.io/sync-wave: "1"
spec:
  # Template for node provisioning
  template:
    metadata:
      labels:
        node-type: "karpenter-managed"
        cluster: "${CLUSTER_NAME}"
    spec:
      # Reference to EC2NodeClass
      nodeClassRef:
        group: karpenter.k8s.aws
        kind: EC2NodeClass
        name: default
        
      # Node requirements with ARM64 preference and spot support
      requirements:
        # Prefer ARM64 architecture
        - key: kubernetes.io/arch
          operator: In
          values: ["arm64", "amd64"]
          minValues: 1
          
        # Linux OS
        - key: kubernetes.io/os
          operator: In
          values: ["linux"]
          
        # Support both spot and on-demand with spot preference
        - key: karpenter.sh/capacity-type
          operator: In
          values: ["spot", "on-demand"]
          
        # Instance categories suitable for general workloads (ARM64 optimized)
        - key: karpenter.k8s.aws/instance-category
          operator: In
          values: ["c", "m", "r"]
          
        # Modern instance generations (4+ for ARM64 support)
        - key: karpenter.k8s.aws/instance-generation
          operator: Gt
          values: ["4"]
          
        # Size limits for cost control (expanded for ARM64 options)
        - key: karpenter.k8s.aws/instance-size
          operator: In
          values: ["small", "medium", "large", "xlarge", "2xlarge"]

        # Ensure sufficient memory capacity per node (>= 2Gi)
        - key: karpenter.k8s.aws/instance-memory
          operator: Gt
          values: ["1"]
          
      # Startup taints for K3s initialization
      startupTaints:
        - key: karpenter.sh/unregistered
          value: "true"
          effect: NoExecute
          
      # Node expiration for security and cost management
      expireAfter: 720h # 30 days
      
      # Termination grace period
      terminationGracePeriod: 48h
      
  # Resource limits to control costs
  limits:
    cpu: "200"
    memory: "200Gi"
    
  # Disruption settings for node lifecycle management
  disruption:
    # Consolidate when nodes are empty or underutilized
    consolidationPolicy: WhenEmptyOrUnderutilized
    
    # Wait time before consolidation
    consolidateAfter: 30s
    
    # Budget controls for disruption rate limiting
    budgets:
      # Allow up to 10% of nodes to be disrupted at once
      - nodes: "10%"
      
      # Maintenance window: reduced disruption during business hours (UTC)
      - schedule: "0 9 * * mon-fri"
        duration: 8h
        nodes: "5%"
        
  # Weight for NodePool selection (higher = preferred)
  weight: 10
