apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  name: validate-cert-manager-pod-identity
  annotations:
    policies.kyverno.io/title: Validate Cert-Manager Pod Identity
    policies.kyverno.io/category: Security, AWS
    policies.kyverno.io/severity: high
    policies.kyverno.io/subject: Pod
    policies.kyverno.io/minversion: 1.6.0
    policies.kyverno.io/description: >-
      This policy ensures that cert-manager controller pods have the AWS_ROLE_ARN 
      environment variable injected by the EKS Pod Identity webhook. If the environment 
      variable is missing, the pod is rejected, allowing the webhook to retry the mutation.
    argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
    argocd.argoproj.io/sync-wave: "3"
spec:
  validationFailureAction: enforce
  background: true
  rules:
  - name: validate-cert-manager-aws-role-arn-env-var
    match:
      any:
      - resources:
          kinds:
          - Pod
          names:
          - "cert-manager-*"
          namespaces:
          - cert-manager
    validate:
      message: >-
        Cert-manager controller pod must have AWS_ROLE_ARN environment variable 
        injected by EKS Pod Identity webhook. Pod will be rejected to allow webhook retry.
      cel:
        expressions:
        - expression: >-
            object.spec.containers.filter(c, c.name == 'cert-manager-controller').all(c, 
            c.env.exists(e, e.name == 'AWS_ROLE_ARN' && size(e.value) > 0))
          message: "Cert-manager controller container must have AWS_ROLE_ARN environment variable with non-empty value"
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  name: validate-cert-manager-serviceaccount-pod-identity
  annotations:
    policies.kyverno.io/title: Validate Cert-Manager ServiceAccount Pod Identity
    policies.kyverno.io/category: Security, AWS
    policies.kyverno.io/severity: medium
    policies.kyverno.io/subject: Pod
    policies.kyverno.io/minversion: 1.6.0
    policies.kyverno.io/description: >-
      This policy ensures that cert-manager controller pods are using the correct 
      service account that has the EKS role annotation for pod identity.
    argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
    argocd.argoproj.io/sync-wave: "3"
spec:
  validationFailureAction: enforce
  background: true
  rules:
  - name: validate-cert-manager-serviceaccount-name
    match:
      any:
      - resources:
          kinds:
          - Pod
          names:
          - "cert-manager-*"
          namespaces:
          - cert-manager
    validate:
      message: >-
        Cert-manager controller pod must use the 'cert-manager' service account 
        for proper EKS Pod Identity integration.
      pattern:
        spec:
          serviceAccountName: "cert-manager"
